# person.py
class Person:
    """Represents a person with basic details."""

    def __init__(self, name: str, contact_info: str):
        self._name = name
        self._contact_info = contact_info

    def get_name(self):
        return self._name

    def set_name(self, name: str):
        self._name = name

    def get_contact_info(self):
        return self._contact_info

    def set_contact_info(self, contact_info: str):
        self._contact_info = contact_info

    def __str__(self):
        return f"Person(Name: {self._name}, Contact Info: {self._contact_info})"


# customer.py
class Customer(Person):
    """Represents a customer with additional attributes for loyalty status."""

    def __init__(self, customer_id: int, name: str, contact_info: str, is_loyal: bool = False):
        super().__init__(name, contact_info)
        self._customer_id = customer_id
        self._is_loyal = is_loyal

    def get_customer_id(self):
        return self._customer_id

    def set_customer_id(self, customer_id: int):
        self._customer_id = customer_id

    def is_loyal(self):
        return self._is_loyal

    def set_loyal(self, is_loyal: bool):
        self._is_loyal = is_loyal

    def __str__(self):
        return f"Customer(ID: {self._customer_id}, Name: {self.get_name()}, Loyal: {self._is_loyal})"


# ebook.py
class EBook:
    """Represents an e-book with essential details."""

    def __init__(self, title: str, author: str, publication_date: str, genre: str, price: float):
        self._title = title
        self._author = author
        self._publication_date = publication_date
        self._genre = genre
        self._price = price

    def get_price(self):
        return self._price

    def __str__(self):
        return f"EBook(Title: {self._title}, Author: {self._author}, Price: {self._price})"


# order_item.py
class OrderItem:
    """Represents an item in an order with a specified quantity."""

    def __init__(self, ebook: EBook, quantity: int):
        self._ebook = ebook
        self._quantity = quantity

    def get_ebook(self):
        return self._ebook

    def get_quantity(self):
        return self._quantity

    def __str__(self):
        return f"OrderItem(EBook: {self._ebook}, Quantity: {self._quantity})"


# order.py
class Order:
    """Represents an order containing multiple items."""

    def __init__(self, order_id: int, order_items: list[OrderItem]):
        self._order_id = order_id
        self._order_items = order_items
        self._total_price = sum(item.get_ebook().get_price() * item.get_quantity() for item in order_items)

    def get_total_price(self):
        return self._total_price

    def __str__(self):
        items = ', '.join(str(item) for item in self._order_items)
        return f"Order(ID: {self._order_id}, Total Price: {self._total_price}, Items: [{items}])"


# invoice.py
class Invoice:
    """Represents an invoice for an order, applying taxes and discounts."""

    def __init__(self, invoice_id: int, order: Order, discount: float = 0.0, vat: float = 0.08):
        self._invoice_id = invoice_id
        self._order = order
        self._discount = discount
        self._vat = vat
        self._final_price = self.calculate_final_price()

    def calculate_final_price(self):
        subtotal = self._order.get_total_price() * (1 - self._discount)
        return subtotal * (1 + self._vat)

    def __str__(self):
        return f"Invoice(ID: {self._invoice_id}, Final Price: {self._final_price})"


# shopping_cart.py
class ShoppingCart:
    """Represents a shopping cart for adding/removing order items."""

    def __init__(self):
        self._items = []

    def add_item(self, item: OrderItem):
        self._items.append(item)

    def remove_item(self, item: OrderItem):
        for cart_item in self._items:
            if cart_item.get_ebook() == item.get_ebook() and cart_item.get_quantity() == item.get_quantity():
                self._items.remove(cart_item)
                break
        else:
            print("Item not found in the cart.")

    def update_item_quantity(self, item: OrderItem, quantity: int):
        for cart_item in self._items:
            if cart_item.get_ebook() == item.get_ebook():
                cart_item._quantity = quantity  # Update quantity directly
                break

    def calculate_total(self):
        return sum(item.get_ebook().get_price() * item.get_quantity() for item in self._items)

    def __str__(self):
        items = ', '.join(str(item) for item in self._items)
        return f"ShoppingCart(Items: [{items}], Total: {self.calculate_total()})"


# test_cases.py - Testing the entire E-bookstore Management System functionality
# Create some EBook instances for testing
ebook1 = EBook("Arabistan Orchards", "Author Osama Al Muslim", "2015", "Story", 50.0)
ebook2 = EBook("Harry Potter", "J.K Rowling", "2007", "Story", 70.0)

# Create a customer instance
customer = Customer(1, "Hamda", "Hamda@gmail.com", is_loyal=True)
print(customer)

# Create a shopping cart and add items to it
cart = ShoppingCart()
cart.add_item(OrderItem(ebook1, 2))
cart.add_item(OrderItem(ebook2, 1))
print(cart)

# Create an order from the shopping cart
order = Order(101, cart._items)
print(order)

# Generate an invoice with a loyalty discount and VAT
loyalty_discount = 0.1  # 10% loyalty discount
invoice = Invoice(1001, order, discount=loyalty_discount)
print(invoice)

# Additional test cases for E-bookstore Management System

# Test Case 1: Adding more items to the ShoppingCart
print("\n--- Test Case 1: Adding more items to ShoppingCart ---")
ebook3 = EBook("The Silent Patient", "Alex Michaelides", "2019", "Thriller", 60.0)
cart.add_item(OrderItem(ebook3, 3))  # Adding a new ebook with quantity of 3
print(cart)  # Expected: cart includes three types of books with the updated total price

# Test Case 2: Removing an item from the ShoppingCart
print("\n--- Test Case 2: Removing an item from ShoppingCart ---")
cart.remove_item(OrderItem(ebook1, 2))  # Remove "Arabistan Orchards" with quantity 2
print(cart)  # Expected: "Arabistan Orchards" should be removed from the cart, with updated total price

# Test Case 3: Updating quantity of an existing item in ShoppingCart
print("\n--- Test Case 3: Updating quantity of an existing item in ShoppingCart ---")
cart.update_item_quantity(OrderItem(ebook2, 1), 5)  # Update "Harry Potter" quantity to 5
print(cart)  # Expected: "Harry Potter" quantity updated to 5 with new total price

# Test Case 4: Calculating total price in an Order without any items
print("\n--- Test Case 4: Order without any items ---")
empty_order = Order(102, [])  # Create an empty order
print(empty_order)  # Expected: total price should be 0, and items list should be empty

# Test Case 5: Applying a different VAT rate in Invoice
print("\n--- Test Case 5: Invoice with different VAT rate ---")
invoice_different_vat = Invoice(1002, order, discount=0.05, vat=0.12)  # 12% VAT with 5% discount
print(invoice_different_vat)  # Expected: final price calculated with 12% VAT and 5% discount

# Test Case 6: Generating Invoice without a discount
print("\n--- Test Case 6: Invoice without a discount ---")
invoice_no_discount = Invoice(1003, order, discount=0.0)  # No discount applied
print(invoice_no_discount)  # Expected: final price calculated with 8% VAT and no discount

# Test Case 7: Customer loyalty check
print("\n--- Test Case 7: Customer loyalty status ---")
print(f"Is customer loyal? {customer.is_loyal()}")  # Expected: True if customer loyalty is set to True

# Test Case 8: Multiple customers with unique IDs
print("\n--- Test Case 8: Multiple Customers with unique IDs ---")
customer2 = Customer(2, "Ahmed", "Ahmed@gmail.com", is_loyal=False)
print(customer2)  # Expected: Customer ID 2 with loyalty status False
customer3 = Customer(3, "Sara", "Sara@hotmail.com")
print(customer3)  # Expected: Customer ID 3 with default loyalty status False
