import tkinter as tk

class TicketBookingGUI:
    """Class to create the Ticket Booking GUI application"""

    def __init__(self):
        # Create the main window
        self.main_window = tk.Tk()
        self.main_window.title("Ticket Booking System")
        self.main_window.geometry("400x400")

        # Main Menu Frame
        self.create_main_menu()

        # Run the main loop
        self.main_window.mainloop()

    def create_main_menu(self):
        """Creates the main menu interface"""
        self.clear_window()

        tk.Label(self.main_window, text="Adventure Land", font=("Arial", 18, "bold")).pack(pady=20)

        # Buttons for different sections
        tk.Button(self.main_window, text="Account Management", width=30, command=self.account_management).pack(pady=5)
        tk.Button(self.main_window, text="Ticket Purchasing", width=30, command=self.ticket_purchasing).pack(pady=5)
        tk.Button(self.main_window, text="Admin Dashboard", width=30, command=self.admin_dashboard).pack(pady=5)
        tk.Button(self.main_window, text="Exit", width=30, command=self.main_window.quit).pack(pady=20)

    def account_management(self):
        """Creates the Account Management section"""
        self.clear_window()

        tk.Label(self.main_window, text="Account Management", font=("Arial", 16, "bold")).grid(row=0, column=0, columnspan=2, pady=10)

        # Input Fields
        tk.Label(self.main_window, text="Customer ID:").grid(row=1, column=0, sticky="e", padx=10)
        self.customer_id_entry = tk.Entry(self.main_window)
        self.customer_id_entry.grid(row=1, column=1)

        tk.Label(self.main_window, text="Name:").grid(row=2, column=0, sticky="e", padx=10)
        self.customer_name_entry = tk.Entry(self.main_window)
        self.customer_name_entry.grid(row=2, column=1)

        tk.Label(self.main_window, text="Contact Info:").grid(row=3, column=0, sticky="e", padx=10)
        self.customer_contact_entry = tk.Entry(self.main_window)
        self.customer_contact_entry.grid(row=3, column=1)

        # Buttons
        tk.Button(self.main_window, text="Add", command=self.add_customer).grid(row=4, column=0, pady=10)
        tk.Button(self.main_window, text="Modify", command=self.modify_customer).grid(row=4, column=1, pady=10)
        tk.Button(self.main_window, text="Delete", command=self.delete_customer).grid(row=5, column=0, pady=10)
        tk.Button(self.main_window, text="Display All", command=self.display_customers).grid(row=5, column=1, pady=10)
        tk.Button(self.main_window, text="Back", command=self.create_main_menu).grid(row=6, column=0, columnspan=2, pady=20)

    def ticket_purchasing(self):
        """Creates the Ticket Purchasing section"""
        self.clear_window()

        tk.Label(self.main_window, text="Ticket Purchasing", font=("Arial", 16, "bold")).grid(row=0, column=0, columnspan=2, pady=10)

        # Ticket Options
        tk.Label(self.main_window, text="Select Ticket Type:").grid(row=1, column=0, sticky="e", padx=10)
        self.ticket_type = tk.StringVar(value="Single-Day Pass")
        ttk.Combobox(self.main_window, textvariable=self.ticket_type, values=["Single-Day Pass", "VIP Pass", "Group Ticket"], state="readonly").grid(row=1, column=1, pady=5)

        tk.Label(self.main_window, text="Number of Tickets:").grid(row=2, column=0, sticky="e", padx=10)
        self.num_tickets_entry = tk.Entry(self.main_window)
        self.num_tickets_entry.grid(row=2, column=1, pady=5)

        tk.Label(self.main_window, text="Payment Method:").grid(row=3, column=0, sticky="e", padx=10)
        self.payment_method = tk.StringVar(value="Credit Card")
        ttk.Combobox(self.main_window, textvariable=self.payment_method, values=["Credit Card", "Debit Card"], state="readonly").grid(row=3, column=1, pady=5)

        # Buttons
        tk.Button(self.main_window, text="Purchase", command=self.purchase_ticket).grid(row=4, column=0, columnspan=2, pady=10)
        tk.Button(self.main_window, text="Back", command=self.create_main_menu).grid(row=5, column=0, columnspan=2, pady=20)

    def admin_dashboard(self):
        """Creates the Admin Dashboard"""
        self.clear_window()

        tk.Label(self.main_window, text="Admin Dashboard", font=("Arial", 16, "bold")).pack(pady=10)

        # Display ticket sales summary (hardcoded example)
        sales_summary = {
            "Single-Day Pass": 10,
            "VIP Pass": 5,
            "Group Ticket": 2,
        }
        summary_text = "\n".join(f"{ticket}: {count}" for ticket, count in sales_summary.items())
        tk.Label(self.main_window, text="Ticket Sales Summary:", font=("Arial", 12, "bold")).pack()
        tk.Label(self.main_window, text=summary_text).pack(pady=10)

        tk.Button(self.main_window, text="Back", command=self.create_main_menu).pack(pady=20)

    def add_customer(self):
        """Adds a new customer (dummy implementation)"""
        customer_id = self.customer_id_entry.get()
        name = self.customer_name_entry.get()
        contact = self.customer_contact_entry.get()

        if not customer_id or not name or not contact:
            messagebox.showerror("Error", "Please fill out all fields!")
        else:
            messagebox.showinfo("Success", f"Customer {name} added successfully!")

    def modify_customer(self):
        """Modifies customer details (dummy implementation)"""
        messagebox.showinfo("Modify", "Modify customer feature is under development!")

    def delete_customer(self):
        """Deletes a customer (dummy implementation)"""
        messagebox.showinfo("Delete", "Delete customer feature is under development!")

    def display_customers(self):
        """Displays all customers (dummy implementation)"""
        messagebox.showinfo("Display All", "Display all customers feature is under development!")

    def purchase_ticket(self):
        """Processes ticket purchase"""
        try:
            num_tickets = int(self.num_tickets_entry.get())
            if num_tickets <= 0:
                raise ValueError
        except ValueError:
            messagebox.showerror("Error", "Number of tickets must be a positive integer!")
            return

        ticket_type = self.ticket_type.get()
        payment_method = self.payment_method.get()

        messagebox.showinfo("Success", f"Purchased {num_tickets} {ticket_type}(s) via {payment_method}!")

    def clear_window(self):
        """Clears all widgets in the main window"""
        for widget in self.main_window.winfo_children():
            widget.destroy()


# Run the application
if __name__ == "__main__":
    TicketBookingGUI()
